// { Driver Code Starts
/* program to construct tree using inorder and postorder traversals */
#include <bits/stdc++.h>
using namespace std;

/* A binary tree node has data, pointer to left child
   and a pointer to right child */
struct Node {
    int data;
    struct Node* left;
    struct Node* right;

    Node(int x) {
        data = x;
        left = right = NULL;
    }
};

/* This funtcion is here just to test buildTreeUtil() */
void preOrder(Node* node) {
    if (node == NULL) return;

    /* then print the data of node */
    printf("%d ", node->data);

    /* first recur on left child */
    preOrder(node->left);

    /* now recur on right child */
    preOrder(node->right);
}

Node* buildTree(int in[], int post[], int n);

int main() {
    int t, n;
    cin >> t;
    while (t--) {
        cin >> n;
        int in[n], post[n];
        for (int i = 0; i < n; i++) cin >> in[i];
        for (int i = 0; i < n; i++) cin >> post[i];
        Node* root = buildTree(in, post, n);
        preOrder(root);
        cout << endl;
    }
    return 0;
}
// } Driver Code Ends


/* Tree node structure

struct Node
{
    int data;
    struct Node* left;
    struct Node* right;

    Node(int x){
        data = x;
        left = right = NULL;
    }
};*/
Node* buildTreePostIn(int in[], int is, int ie, int post[], int ps, int pe, unordered_map<int,int> &hm){
        if (ps > pe || is > ie)
            return NULL;
        
        Node* root = new Node(post[pe]);
        int ri = hm[post[pe]];
        
        root->left = buildTreePostIn(in, is, ri - 1, post, ps, ps + ri - is - 1, hm);
        root->right  = buildTreePostIn(in, ri + 1, ie, post, ps + ri - is, pe - 1, hm);
        
        return root;
    }
//Function to return a tree created from postorder and inoreder traversals.
Node *buildTree(int in[], int post[], int n) {
     
        unordered_map<int,int> hm;
        
        for (int i = 0; i < n ; ++i)
            hm[in[i]] = i;
        
        return buildTreePostIn(in, 0, n, post, 0, n , hm);
}
